package act.Controller;

import act.View.*;
import act.MainActivity;
import act.Model.*;


public class MainController{
	
	private static MainActivity mainActivity;
	private static MainView mainView;
	private static int questionIndex = 0;
	private static int splitIndex = 0;
	private static int partIndex = 0;
	private static TestBasicInfo basicInfo;
	private static boolean isInstructionShowing = true;
	private static AnswerModel ans;
	private static int[] questionInSplit = new int[ModelConstants.QUESTIONNUM_TOTAL];
	private static int[] splitInPart = new int[ModelConstants.SPLITNUM_TOTAL];
	private static reading readingBrain;
	private static math mathBrain;
	private static int currentStatus;
	private static int testIndex ;
	
	public MainController()
	{
		
	}
	
	public static void init(){
		reset();
		calQuestionIndex();
		calSplitIndex();
		isInstructionShowing = true;
		UpdateBrains(0,0,testIndex);
	}
	private static void calQuestionIndex(){
		for(int i=0;i<ModelConstants.QUESTIONNUM_TOTAL;i++){
			questionInSplit[i] = basicInfo.questionIndexinSplit(i);
		}
	}
	private static void calSplitIndex(){
		for(int i=0;i<ModelConstants.SPLITNUM_TOTAL;i++){
			splitInPart[i] = basicInfo.splitIndexinPart(i);
			//System.out.println(i+","+splitInPart[i]);
		}
	}
	public static void handleNext(){
//		System.out.println(questionIndex+","+splitIndex+","+partIndex);
		if(partIndex >= basicInfo.getTotalPartNum()){
			handleScore();
			return;
		}
		if(isInstructionShowing){
			isInstructionShowing = false;
			if(partIndex == ModelConstants.MATH){
				
				mainView.showChoiceView();
			}
			else if(partIndex == ModelConstants.ENGLISH){
				mainView.showPassageView();
			}
			else if(partIndex == ModelConstants.READING){
				mainView.showPassageView();
			}
			else if(partIndex == ModelConstants.SCIENCE){
				mainView.showPassageView();
			}
			else if(partIndex == ModelConstants.WRITING){
				mainView.showWritingView();
			}
			mainView.requestUpdate(questionIndex, splitIndex, partIndex);
			mainView.startTimer(partIndex);
			return;
		}
		if(basicInfo.isLastInPart(questionIndex)){
			submitThisPart();
			isInstructionShowing = true;
			
			return;
		}
		else if(basicInfo.isLastInSplit(questionIndex)){
			questionIndex++;
			splitIndex++;
		}
		else
		{
			questionIndex++;
		}
		readingBrain.updateReading(testIndex,splitInPart[splitIndex], partIndex);
		mainView.requestUpdate(questionIndex, splitIndex, partIndex);
	}
	
	public static void handleBef(){
		//System.out.println(questionIndex+","+splitIndex+","+partIndex);
		if(partIndex > basicInfo.getTotalPartNum() || isInstructionShowing || basicInfo.isFirstInPart(questionIndex)){
			return;
		}
		if(basicInfo.isFirstInSplit(questionIndex)){
			questionIndex--;
			splitIndex--;
		}
		else{
			questionIndex--;
		}
		readingBrain.updateReading(testIndex,splitInPart[splitIndex], partIndex);
		mainView.requestUpdate(questionIndex, splitIndex, partIndex);
		
	}
	public static void handleScore(){
		isDuringTest = false;
		mainView.setCountingStatus(false);
		ans.judgeScore();
		mainView.showScoreView();	
	}
	public static void handleReturn(){
		mainActivity.showMenuView();
		ans.resetAll();
		
	}
	
	public static void setMainContent(MainView v){
		mainView = v;
	}
	public static void setBasicInfo(TestBasicInfo t){
		basicInfo = t;
		ans.setBasicInfo(t);
	}
	public static void setAnswerModel(AnswerModel a){
		ans = a;
	}
	public static void setAnswer(int questionIndex,int answer){
		ans.setAns(questionIndex, answer);
	}
	public static int getAnswer(int questionIndex){
		return ans.getAnswer(questionIndex);
	}
	public static int questionIndexinSplit(int questionIndexinTotal){
		return questionInSplit[questionIndexinTotal];
	}
	public static int splitIndexinPart(int splitIndexinTotal){
		return splitInPart[splitIndexinTotal];
	}
	public static void setReading(reading r){
		readingBrain = r;
	}
	public static void setMath(math m){
		mathBrain = m;
	}
	public static void UpdateBrains(int splitIndex,int partIndex,int testIndex){
		mathBrain.updateMath(testIndex);
		readingBrain.updateReading(testIndex, splitInPart[splitIndex], partIndex);
	}
	public static void setMainActivity(MainActivity m){
		mainActivity = m;
	}
	public static void setTestIndex(int testIndex){
		MainController.testIndex = testIndex;
	}
	public static void reset(){
		questionIndex = 0;
		splitIndex = 0;
		partIndex = 0;
		
	}
	public static int getPartIndex(){
		return partIndex;
	}
	public static int getSplitIndex(){
		return splitIndex;
	}
	public static int getTestIndex(){
		return testIndex;
	}
	public static int getQuestionIndex(){
		return questionIndex;
	}
	public static void timeIsUp(){
		if(partIndex + 1 >= ModelConstants.PARTNUM_TOTAL){
			handleScore();
		}
		else {
			submitThisPart();
		}
	}
	public static void submitThisPart(){
		if(partIndex == ModelConstants.WRITING){
			handleScore();
			return;
		}
		mainView.showInstructionView(testIndex,++partIndex);
		mainView.setCountingStatus(false);
		mainView.initTimer(partIndex);
		splitIndex = basicInfo.firstSplitInPart(partIndex);
		questionIndex = basicInfo.firstQuestionIndexInSplit(splitIndex);
		UpdateBrains(splitIndex,partIndex,testIndex);
		//System.out.println(questionIndex+","+splitIndex);
		isInstructionShowing = true;
		
	}
	
	public static boolean notThisPartWriting(){
		return (partIndex != ModelConstants.WRITING) || (partIndex == ModelConstants.WRITING && isInstructionShowing);
	}
	
};
